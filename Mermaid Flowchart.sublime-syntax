%YAML 1.2
---
# See https://www.sublimetext.com/docs/syntax.html
name: Mermaid Flowchart
scope: source.mermaid.flowchart
extends: Packages/Mermaid/mermaid.sublime-syntax
version: 2
variables:
  graph_link: (?:(?:-?-(?:-|\>)|=?=(?:=|\>)|(?:\.-|-\.)-?\>?)|~~~)
  entity: \b[-\w]+\b
  text: \b[-\w\s!?]+
  # TODO: untested, test breaks, despite highlight working
  text_and_symbols: \"[-!#$%\^&*+=?,./:'\\\w\s]+\"
contexts:
  prototype:
    - meta_prepend: true
    - match: ';'
      scope: punctuation.terminator.flowchart

  main:
    - include: style
    - match: ^\s*(click)\s+{{entity}}\s+
      captures:
        1: keyword.type.interaction.graph.mermaid
      push:
        - meta_scope: meta.declaration.interaction.graph.mermaid
        - match: \b\w+\b
          scope: entity.name.callback.interaction.graph.mermaid
        - include: quoted_string
        - match: $
          pop: true

    - match: ^\s*(subgraph)\s+(.*)$
      captures:
        1: keyword.type.begin.sub.graph.mermaid
        2: string.unquoted.sub.graph.mermaid
      push:
        - meta_scope: meta.declaration.sub.graph.mermaid
        - include: main
        - match: ^\s*end\b
          scope: keyword.type.end.sub.graph.mermaid
          pop: true

    - match: ^\s*(?={{entity}})
      push:
        - node

  node:
    - match: '{{entity}}'
      scope: meta.node-name.mermaid variable.parameter.mermaid
      push:
        - maybe-node-declaration
    - match: $
      pop: 1

  maybe-node-declaration:
    - match: \(\[ # stadium shaped
      scope: keyword.operator.begin.node.graph.mermaid
      embed: node-declaration-text
      escape: \]\)
      escape_captures:
        0: meta.declaration.node.graph.mermaid keyword.operator.end.node.graph.mermaid
      set: maybe-graph-link
    - match: \[\[ # subroutine
      scope: keyword.operator.begin.node.graph.mermaid
      embed: node-declaration-text
      escape: \]\]
      escape_captures:
        0: meta.declaration.node.graph.mermaid keyword.operator.end.node.graph.mermaid
      set: maybe-graph-link
    - match: \[\( # cylindrical
      scope: keyword.operator.begin.node.graph.mermaid
      embed: node-declaration-text
      escape: \)\]
      escape_captures:
        0: meta.declaration.node.graph.mermaid keyword.operator.end.node.graph.mermaid
      set: maybe-graph-link
    - match: '>' # asymmetric
      scope: keyword.operator.begin.node.graph.mermaid
      embed: node-declaration-text
      escape: \]
      escape_captures:
        0: meta.declaration.node.graph.mermaid keyword.operator.end.node.graph.mermaid
      set: maybe-graph-link
    - match: \{\{ # hexagon
      scope: keyword.operator.begin.node.graph.mermaid
      embed: node-declaration-text
      escape: \}\}
      escape_captures:
        0: meta.declaration.node.graph.mermaid keyword.operator.end.node.graph.mermaid
      set: maybe-graph-link
    - match: \[/ # Parallelogram or Trapezoid
      scope: keyword.operator.begin.node.graph.mermaid
      embed: node-declaration-text
      escape: '[/\\]\]'
      escape_captures:
        0: meta.declaration.node.graph.mermaid keyword.operator.end.node.graph.mermaid
      set: maybe-graph-link
    - match: \[\\ # Parallelogram alt or Trapezoid alt
      scope: keyword.operator.begin.node.graph.mermaid
      embed: node-declaration-text
      escape: '[\\/]\]'
      escape_captures:
        0: meta.declaration.node.graph.mermaid keyword.operator.end.node.graph.mermaid
      set: maybe-graph-link
    - match: \(\(\( # double circle
      scope: keyword.operator.begin.node.graph.mermaid
      embed: node-declaration-text
      escape: \)\)\)
      escape_captures:
        0: meta.declaration.node.graph.mermaid keyword.operator.end.node.graph.mermaid
      set: maybe-graph-link
    - match: \(\( # circle
      scope: keyword.operator.begin.node.graph.mermaid
      embed: node-declaration-text
      escape: \)\)
      escape_captures:
        0: meta.declaration.node.graph.mermaid keyword.operator.end.node.graph.mermaid
      set: maybe-graph-link
    - match: \( # round edges
      scope: keyword.operator.begin.node.graph.mermaid
      embed: node-declaration-text
      escape: \)
      escape_captures:
        0: meta.declaration.node.graph.mermaid keyword.operator.end.node.graph.mermaid
      set: maybe-graph-link
    - match: \[ # rectangular
      scope: keyword.operator.begin.node.graph.mermaid
      embed: node-declaration-text
      escape: \]
      escape_captures:
        0: meta.declaration.node.graph.mermaid keyword.operator.end.node.graph.mermaid
      set: maybe-graph-link
    - match: \{ # rhombus
      scope: keyword.operator.begin.node.graph.mermaid
      embed: node-declaration-text
      escape: \}
      escape_captures:
        0: meta.declaration.node.graph.mermaid keyword.operator.end.node.graph.mermaid
      set: maybe-graph-link

    - match: ':::'
      scope: punctuation.accessor.double-colon.flowchart
      push: class-expect-class-name
    - match: ''
      set: expect-graph-link

  expect-graph-link:
    - meta_scope: meta.declaration.link.graph.mermaid
    - include: maybe-graph-link

  maybe-graph-link:
    # Length  1 2 3
    # Normal  --- ----  -----
    # Normal with arrow --> --->  ---->
    # Thick === ====  =====
    # Thick with arrow  ==> ===>  ====>
    # Dotted  -.- -..-  -...-
    # Dotted with arrow -.->  -..-> -...->
    - match: |-
        (?x:
          (?:-{2,}>)
        | (?:-{3,})
        | (?:={2,}>)
        | (?:={3,})
        | (?:-\.+->?)
        | (?:~{3,})
        )
      scope: keyword.operator.link.graph.mermaid
      set:
        - node
        - maybe-link-text
    - match: |-
        (?x:
          (?:--)\s*{{text}}\s*(?:-{2,}>)
        | (?:--)\s*{{text}}\s*(?:-{3,})
        | (?:==)\s*{{text}}\s*(?:={2,}>)
        | (?:==)\s*{{text}}\s*(?:={3,})
        | (?:-\.)\s*{{text}}\s*(?:\.+->)
        )
      scope: keyword.operator.link.graph.mermaid
      set:
        - node
        - maybe-link-text
    - match: $
      pop: 1

  maybe-link-text:
    - match: (\|)\s*({{text}}|{{text_and_symbols}})\s*(\|)
      captures:
        1: keyword.operator.begin.text.link.graph.mermaid
        2: string.unquoted.link.graph.mermaid
        3: keyword.operator.end.text.link.graph.mermaid
      pop: 1
    # - match: ({{text}}|{{text_and_symbols}})\s?({{graph_link}})
    #   captures:
    #     1: string.unquoted.link.graph.mermaid
    #     2: keyword.operator.link.graph.mermaid
    #   pop: 1
    - match: $|(?=\S)
      pop: 1

  style:
    - match: ^\s*(class)\s+
      captures:
        1: keyword.declaration.styling.graph.mermaid
      push:
        - meta_scope: meta.declaration.styling.graph.mermaid
        - match: $
          pop: true
        - match: ''
          push: class-expect-node-name
    - match: ^\s*(classDef)\s+({{entity}})\s+
      captures:
        1: keyword.declaration.styling.graph.mermaid
        2: entity.name.constant.styling.graph.mermaid
      embed: scope:source.css.mermaid#inside-property-list
      escape: $

    - match: ^\s*(style)\s+({{entity}})\s+
      captures:
        1: keyword.declaration.styling.graph.mermaid
        2: variable.parameter.graph.mermaid
      embed: scope:source.css.mermaid#property-list-content
      escape: $

  class-expect-node-name:
    - match: '{{entity}}'
      scope: variable.parameter.flowchart
    - match: \s
      set: class-expect-class-name
    - match: ','
      scope: punctuation.separator.sequence.flowchart
    - match: $
      pop: true

  class-expect-class-name:
    - match: '{{entity}}'
      scope: support.name.styling.graph.mermaid
      pop: 1
    - match: $
      pop: 1

  node-declaration-text:
    - meta_scope: meta.declaration.node.graph.mermaid
    - meta_content_scope: string.unquoted.node.graph.mermaid
    - match: ''
      push: scope:text.html.basic
